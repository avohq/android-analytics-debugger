// Generated by Avo VERSION 62.7.0, PLEASE EDIT WITH CARE
package sh.avo;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import javax.net.ssl.HttpsURLConnection;

import android.os.AsyncTask;

import java.lang.reflect.Method;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Application;
import android.content.Context;
import android.util.Log;
import android.annotation.SuppressLint;
import java.lang.reflect.Constructor;
import android.app.Activity;

public final class Avo {
    public enum AvoEnv {
        PROD,
        DEV
    }

    private static boolean __STRICT__ = true;
    private static AvoEnv __AVO_ENV__ = null;
    private static boolean __AVO_NOOP__ = false;


    public static Object __INSPECTOR__ = null;
    private static Object __MOBILE_DEBUGGER__ = null;

    @SuppressLint("LogNotTimber")
    private static boolean __MOBILE_DEBUGGER_ENABLED__() {
        if (__MOBILE_DEBUGGER__ != null) {
            try {
                Method method = __MOBILE_DEBUGGER__.getClass().getMethod("isEnabled");
                return Boolean.TRUE.equals(method.invoke(__MOBILE_DEBUGGER__));
            } catch (Exception e) {
              Log.e("Avo", "Mobile debugger does not have expected interface, consider updating it to the latest version.");
              return false;
            }
        } else {
            return false;
        }
    }

    @SuppressLint("LogNotTimber")
    private static void __MOBILE_DEBUGGER_SET_SCHEMA_ID__(String schemaId) {
        if (__MOBILE_DEBUGGER__ != null) {
            try {
                Method method = __MOBILE_DEBUGGER__.getClass().getMethod("setSchemaId", String.class);
                method.invoke(__MOBILE_DEBUGGER__, schemaId);
            } catch (Exception e) {
              Log.e("Avo", "Mobile debugger does not have expected interface, consider updating it to the latest version.");
            }
        }
    }

    @SuppressLint("LogNotTimber")
    private static void __MOBILE_DEBUGGER_POST_EVENT__(String id, long timestamp, String name, List<Map<String, String>> messages, List<Map<String, String>> eventProperties, List<Map<String, String>> userProperties) {
        if (__MOBILE_DEBUGGER__ != null) {
            try {
                Method method = __MOBILE_DEBUGGER__.getClass().getMethod("publishEvent",
                    String.class, Long.class, String.class, List.class, List.class,
                    List.class);
                method.invoke(__MOBILE_DEBUGGER__,
                    id, timestamp, name, messages, eventProperties, userProperties);
            } catch (Exception e) {
              Log.e("Avo", "Mobile debugger does not have expected interface, consider updating it to the latest version.");
            }
        }
    }

    private interface ISerializable {
        Map<String, Object> serialize();
    }

    private static <T> List<String> strings(List<T> objects) {
        final List<String> list = new ArrayList<>();
        for (T t: objects) {
            if (t != null) {
                list.add(t.toString());
            }
        }
        return list;
    }

    private static <T extends ISerializable> List<Map<String, Object>> objects(List<T> objects) {
        final List<Map<String, Object>> list = new ArrayList<>();
        for (T t: objects) {
            if (t != null) {
                list.add(t.serialize());
            }
        }
        return list;
    }

    private interface AvoAssertMessage {
        String getPropertyId();

        String getAssertionType();

        String getMessage();
    }

    private static class AvoAssertMax implements AvoAssertMessage {
        private final String propertyId;
        private final String message;

        AvoAssertMax(String propertyId, String message) {
            this.propertyId = propertyId;
            this.message = message;
        }

        public String getPropertyId() { return propertyId; }

        public String getAssertionType() { return "expectedMax"; }

        public String getMessage() { return message; }
    }

    private static class AvoAssertMin implements AvoAssertMessage {
        private final String propertyId;
        private final String message;

        AvoAssertMin(String propertyId, String message) {
            this.propertyId = propertyId;
            this.message = message;
        }

        public String getPropertyId() { return propertyId; }

        public String getAssertionType() { return "expectedMin"; }

        public String getMessage() { return message; }
    }

    private static class AvoAssertNonOptional implements AvoAssertMessage {
        private final String propertyId;
        private final String message;

        AvoAssertNonOptional(String propertyId, String message) {
            this.propertyId = propertyId;
            this.message = message;
        }

        public String getPropertyId() { return propertyId; }

        public String getAssertionType() { return "expectedNonOptional"; }

        public String getMessage() { return message; }
    }

    static class AvoAssert {
        static List<AvoAssertMessage> assertMax(String propertyId, String property, double max, double value) {
            if (value > max) {
                return Collections.<AvoAssertMessage>singletonList(new AvoAssertMax(propertyId, property + " has a maximum value of " + max + " but you provided the value " + value));
            }
            return Collections.emptyList();
        }

        static List<AvoAssertMessage> assertMax(String propertyId, String property, int max, int value) {
            if (value > max) {
                return Collections.<AvoAssertMessage>singletonList(new AvoAssertMax(propertyId, property + " has a maximum value of " + max + " but you provided the value " + value ));
            }
            return Collections.emptyList();
        }

        static List<AvoAssertMessage> assertMax(String propertyId, String property, long max, long value) {
            if (value > max) {
                return Collections.<AvoAssertMessage>singletonList(new AvoAssertMax(propertyId, property + " has a maximum value of " + max + " but you provided the value " + value));
            }
            return Collections.emptyList();
        }

        static List<AvoAssertMessage> assertMin(String propertyId, String property, double min, double value) {
            if (value < min) {
                return Collections.<AvoAssertMessage>singletonList(new AvoAssertMin(propertyId, property + " has a minimum value of " + min + " but you provided the value " + value));
            }
            return Collections.emptyList();
        }

        static List<AvoAssertMessage> assertMin(String propertyId, String property, int min, int value) {
            if (value < min) {
                return Collections.<AvoAssertMessage>singletonList(new AvoAssertMin(propertyId, property + " has a minimum value of " + min + " but you provided the value " + value));
            }
            return Collections.emptyList();
        }

        static List<AvoAssertMessage> assertMin(String propertyId, String property, long min, long value) {
            if (value < min) {
                return Collections.<AvoAssertMessage>singletonList(new AvoAssertMin(propertyId, property + " has a minimum value of " + min + " but you provided the value " + value));
            }
            return Collections.emptyList();
        }

        static <T> List<AvoAssertMessage> assertNonOptional(String propertyId, String property, T prop) {
            if (prop == null) {
                return Collections.<AvoAssertMessage>singletonList(new AvoAssertNonOptional(propertyId, property + " is a required property but you provided null"));
            }
            return Collections.emptyList();
        }
    }


    private static final String TAG = "Avo";

    @SuppressLint("LogNotTimber")
    static class AvoLogger {
        static void logEventSent(String eventName, Map<String, Object> eventProps, Map<String, Object> userProps) {
            Log.i(TAG, "[avo] Event Sent: " + eventName + " Event Props: " +
              (eventProps != null ? eventProps : "empty") + " User Props: " +
              (userProps != null ? userProps : "empty"));
        }

        static void logWarning(String message) {
            Log.w(TAG, "[avo] Warning! " + message);
        }

        static void logInfo(String message) {
            Log.i(TAG, "[avo] " + message);
        }
    }


    public static interface ICustomDestination {
        void make(AvoEnv env);

        void logEvent(String eventName, Map<String, Object> eventProperties);

        void setUserProperties(String userId, Map<String, Object> userProperties);

        void identify(String userId);

        void unidentify();
    }


static class AvoInvoke {
    interface Callback {
        void apply(Double sa);
    }

    private static class HttpPostAsyncTask extends AsyncTask<String, Void, Void> {
        final JSONObject json;
        final Callback onComplete;
        HttpPostAsyncTask(JSONObject json, Callback onComplete) {
            this.json = json;
            this.onComplete = onComplete;
        }

        @Override
        protected Void doInBackground(String... strings) {
            try {
                HttpsURLConnection connection = (HttpsURLConnection) new URL("https://api.avo.app/i").openConnection();
                connection.setRequestMethod("POST");
                connection.setDoOutput(true);
                connection.setRequestProperty("Content-Type", "application/json");

                OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
                writer.write(json.toString());
                writer.flush();

                int statusCode = connection.getResponseCode();
                if (statusCode == 200) {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    try {
                        StringBuffer response = new StringBuffer();
                        String inputLine = reader.readLine();
                        while (inputLine != null) {
                            response.append(inputLine);
                            inputLine = reader.readLine();
                        }
                        JSONObject json = new JSONObject(response.toString());
                        onComplete.apply(json.getDouble("sa"));
                    } finally {
                        reader.close();
                    }
                }
                connection.disconnect();
                return null;
            } catch (Throwable e) {
                return null;
            }
        }
    }

    volatile static double samplingRate = 1.0;

    static void _invoke(String eventId, String hash, List<AvoAssertMessage> messages) throws JSONException {
        if (samplingRate > 0) {
            if (Math.random() < samplingRate) {
                JSONObject json = new JSONObject();
                json.put("ac", "r7GZbs80PujwqVSbNRzY");
                json.put("br", "master");
                json.put("en", "dev");
                json.put("ev", eventId);
                json.put("ha", hash);
                json.put("sc", "0cd8DLUxoxnhXaqRxL6O");
                json.put("se", toISO8601UTC(new Date()));
                json.put("so", "YlFip7cPY");
                json.put("va", messages.isEmpty());
                json.put("or", "event");

                JSONArray me = new JSONArray();
                for (AvoAssertMessage message: messages) {
                    JSONObject obj = new JSONObject();
                    obj.put("tag", message.getAssertionType());
                    obj.put("propertyId", message.getPropertyId());
                    me.put(obj);
                }
                json.put("me", me);

                new HttpPostAsyncTask(json, new Callback() {
                    @Override
                    public void apply(Double rate) {
                        samplingRate = rate;
                    }
                }).execute();
            }
        }
    }

    static void invoke(String eventId, String hash, List<AvoAssertMessage> messages) {
        try {
            _invoke(eventId, hash, messages);
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }
    }

    static void _invokeMeta(String type, List<AvoAssertMessage> messages) throws JSONException {
        if (samplingRate > 0) {
            if (Math.random() < samplingRate) {
                JSONObject json = new JSONObject();
                json.put("ac", "r7GZbs80PujwqVSbNRzY");
                json.put("br", "master");
                json.put("en", "dev");
                json.put("ty", type);
                json.put("sc", "0cd8DLUxoxnhXaqRxL6O");
                json.put("se", toISO8601UTC(new Date()));
                json.put("so", "YlFip7cPY");
                json.put("va", messages.isEmpty());

                JSONArray me = new JSONArray();
                for (AvoAssertMessage message: messages) {
                    JSONObject obj = new JSONObject();
                    obj.put("tag", message.getAssertionType());
                    obj.put("propertyId", message.getPropertyId());
                    me.put(obj);
                }
                json.put("me", me);

                new HttpPostAsyncTask(json, new Callback() {
                    @Override
                    public void apply(Double rate) {
                        samplingRate = rate;
                    }
                }).execute();
            }
        }
    }

    static void invokeMeta(String type, List<AvoAssertMessage> messages) {
        try {
            _invokeMeta(type, messages);
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }
    }

    static String toISO8601UTC(Date date) {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'", Locale.US);
        df.setTimeZone(tz);
        return df.format(date);
    }
}

    private static ICustomDestination custom = null;

    public static void initAvo(Application application, Context context,
                               AvoEnv env,
                               ICustomDestination customDestination) {
        initAvo(application, context, env, customDestination, true, false);
    }

    public static void initAvo(Application application, Context context,
                               AvoEnv env,
                               ICustomDestination customDestination,
                               Object debuggerManager) {
        __MOBILE_DEBUGGER__ = debuggerManager;
        __MOBILE_DEBUGGER_SET_SCHEMA_ID__("0cd8DLUxoxnhXaqRxL6O");
        initAvo(application, context, env, customDestination, false, false);
    }

    public static void initAvo(Application application, Context context,
                               AvoEnv env,
                               ICustomDestination customDestination,
                               boolean strict, Object debuggerManager) {
        __MOBILE_DEBUGGER__ = debuggerManager;
        __MOBILE_DEBUGGER_SET_SCHEMA_ID__("0cd8DLUxoxnhXaqRxL6O");
        initAvo(application, context, env, customDestination, strict, false);
    }

    public static void initAvo(Application application, Context context,
                               AvoEnv env,
                               ICustomDestination customDestination,
                               boolean strict, boolean noop,
                               Object debuggerManager) {
        if (!noop) {
            __MOBILE_DEBUGGER__ = debuggerManager;
            __MOBILE_DEBUGGER_SET_SCHEMA_ID__("0cd8DLUxoxnhXaqRxL6O");
        }
        initAvo(application, context, env, customDestination, strict, noop);
    }

    public static void initAvo(Application application, Context context,
                               AvoEnv env,
                               ICustomDestination customDestination,
                               boolean strict) {
        initAvo(application, context, env, customDestination, strict, false);
    }

    public static void initAvo(Application application, Context context,
                               AvoEnv env,
                               ICustomDestination customDestination,
                               boolean strict, boolean noop) {
        __STRICT__ = strict;
        __AVO_ENV__ = env;
        __AVO_NOOP__ = noop;
        if (__AVO_NOOP__ && __AVO_ENV__ == AvoEnv.PROD) {
            AvoLogger.logWarning("****************************************************");
            AvoLogger.logWarning("Avo cannot be initialized in noop mode in production:");
            AvoLogger.logWarning("- Overwriting configuration with noop=false");
            AvoLogger.logWarning("- Please reach out if you want to be able to run Avo in production mode with noop=true");
            AvoLogger.logWarning("****************************************************");
            __AVO_NOOP__ = false;
        }
        if (__AVO_NOOP__) {
            AvoLogger.logWarning("****************************************************");
            AvoLogger.logInfo("Avo is now initialized in noop mode. This means:");
            AvoLogger.logInfo("- No events will be sent");
            AvoLogger.logInfo("- No network requests are made");
            AvoLogger.logWarning("****************************************************");
        }

        if (!__AVO_NOOP__) {
            if (__AVO_ENV__ == AvoEnv.PROD) {
            }
            if (__AVO_ENV__ == AvoEnv.DEV) {
            }
            custom = customDestination;
            custom.make(env);
            if (__AVO_ENV__ != AvoEnv.PROD) {
                // debug console in Avo
                AvoInvoke.invokeMeta("init", Collections.<AvoAssertMessage>emptyList());
            }
            try {
                Activity providedActivity = context instanceof Activity ? (Activity) context : null;
                Class<?> inspectorClass = Class.forName("app.avo.inspector.AvoInspector");
                Constructor<?> inspectorConstructor = inspectorClass.getDeclaredConstructor(String.class, Application.class, String.class, Activity.class);
                inspectorConstructor.setAccessible(true);
                __INSPECTOR__ = inspectorConstructor.newInstance("cs4jkQUOeoad8EFSg8t9", application, __AVO_ENV__ == AvoEnv.PROD ? "prod" : __AVO_ENV__ == AvoEnv.DEV ? "dev" : "staging", providedActivity);
            } catch (Exception e) {
                AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");
            }
        }
    }

    private static List<AvoAssertMessage> assertUserEmail(String userEmail) {
        final List<AvoAssertMessage> messages = new ArrayList<>();
        messages.addAll(AvoAssert.assertNonOptional("-rU9uRFvXe", "User Email", userEmail));
        return messages;
    }

    private static List<AvoAssertMessage> assertUpcomingTrackName(String upcomingTrackName) {
        final List<AvoAssertMessage> messages = new ArrayList<>();
        messages.addAll(AvoAssert.assertNonOptional("Lvi0sAE1Am", "Upcoming Track Name", upcomingTrackName));
        return messages;
    }

    private static List<AvoAssertMessage> assertUserId_(String userId_) {
        final List<AvoAssertMessage> messages = new ArrayList<>();
        messages.addAll(AvoAssert.assertNonOptional("avo-enriched-type-user-id", "User Id", userId_));
        return messages;
    }

    private static List<AvoAssertMessage> assertCurrentSongName(String currentSongName) {
        final List<AvoAssertMessage> messages = new ArrayList<>();
        messages.addAll(AvoAssert.assertNonOptional("kwANmf381A", "Current Song Name", currentSongName));
        return messages;
    }

    /**
     * App Opened: No description
     *
     * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/oZvpnm2MM">App Opened</a>
     */
    public static void appOpened() {
        // assert properties
        if (__AVO_ENV__ != AvoEnv.PROD || __MOBILE_DEBUGGER_ENABLED__()) {
            final List<AvoAssertMessage> messages = new ArrayList<>();
            // debug console in Avo
            if (!__AVO_NOOP__) {
                AvoInvoke.invoke("oZvpnm2MM", "69e1fdcb79d69ac99e813df3cc951f797327331ee8e368a794c5c12e7a371754", messages);
            }
            if ((__AVO_ENV__ != AvoEnv.PROD && __MOBILE_DEBUGGER__ != null) || (__AVO_ENV__ == AvoEnv.PROD && __MOBILE_DEBUGGER_ENABLED__())) {
                // Avo mobile debugger
                __MOBILE_DEBUGGER_POST_EVENT__("oZvpnm2MM", System.currentTimeMillis(), "App Opened", new ArrayList<Map<String, String>>() {{
                    for (final AvoAssertMessage message: messages) {
                        add(new HashMap<String, String>() {{
                            put("tag", message.getAssertionType());
                            put("propertyId", message.getPropertyId());
                            put("message", message.getMessage());
                        }});
                    }
                }}, new ArrayList<Map<String, String>>() {{
                }}, new ArrayList<Map<String, String>>() {{
                }});
            }
        }

        if (__AVO_ENV__ != AvoEnv.PROD) {
            final Map<String, Object> avoLogEventProperties = new HashMap<>();

            final Map<String, Object> avoLogUserProperties = new HashMap<>();

            AvoLogger.logEventSent("App Opened", avoLogEventProperties, avoLogUserProperties);
        }

        if (!__AVO_NOOP__) {
            if (__INSPECTOR__ != null) {
                final Map<String, Object> inspectorEventProperties = new HashMap<>();

                try {
                    Method inspectorMethod = __INSPECTOR__.getClass().getDeclaredMethod("avoFunctionTrackSchemaFromEvent",
                        String.class, Map.class, String.class, String.class);
                    inspectorMethod.setAccessible(true);
                    inspectorMethod.invoke(__INSPECTOR__, "App Opened", inspectorEventProperties,
                        "oZvpnm2MM", "69e1fdcb79d69ac99e813df3cc951f797327331ee8e368a794c5c12e7a371754");
                } catch (Exception e) {
                    AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");;
                }
            }
            // destination custom
            final Map<String, Object> customEventProperties = new HashMap<>();

            final Map<String, Object> customUserProperties = new HashMap<>();

            custom.logEvent("App Opened", customEventProperties);
        }
    }

    /**
     * Play: Sent when the user plays a track.
     *
     * @param currentSongName The name of the song that's currently playing.
     *
     * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/6p9dLEHQVr">Play</a>
     */
    public static void play(final String currentSongName) {
        // assert properties
        if (__AVO_ENV__ != AvoEnv.PROD || __MOBILE_DEBUGGER_ENABLED__()) {
            final List<AvoAssertMessage> messages = new ArrayList<>();
            messages.addAll(assertCurrentSongName(currentSongName));
            // debug console in Avo
            if (!__AVO_NOOP__) {
                AvoInvoke.invoke("6p9dLEHQVr", "05e0c366ec9e69b66bce9ef162b6dbe0df8122f56aa62cd68a705c7c30fc4ef4", messages);
            }
            if ((__AVO_ENV__ != AvoEnv.PROD && __MOBILE_DEBUGGER__ != null) || (__AVO_ENV__ == AvoEnv.PROD && __MOBILE_DEBUGGER_ENABLED__())) {
                // Avo mobile debugger
                __MOBILE_DEBUGGER_POST_EVENT__("6p9dLEHQVr", System.currentTimeMillis(), "Play", new ArrayList<Map<String, String>>() {{
                    for (final AvoAssertMessage message: messages) {
                        add(new HashMap<String, String>() {{
                            put("tag", message.getAssertionType());
                            put("propertyId", message.getPropertyId());
                            put("message", message.getMessage());
                        }});
                    }
                }}, new ArrayList<Map<String, String>>() {{
                    add(new HashMap<String, String>() {{
                        put("id", "kwANmf381A");
                        put("name", "Current Song Name");
                        put("value", currentSongName != null ? currentSongName.toString() : "");
                    }});
                }}, new ArrayList<Map<String, String>>() {{
                }});
            }
            if (__AVO_ENV__ != AvoEnv.PROD && __STRICT__) {
                // throw exception if messages is not empty
                if (!messages.isEmpty()) {
                    throw new IllegalArgumentException("Error sending event 'Play': " + messages.get(0).getMessage());
                }
            } else {
                for (AvoAssertMessage m: messages) {
                    Log.w(TAG, "[avo] " + m.getMessage());
                }
            }
        }

        if (__AVO_ENV__ != AvoEnv.PROD) {
            final Map<String, Object> avoLogEventProperties = new HashMap<>();
            if (currentSongName != null) {
                avoLogEventProperties.put("Current Song Name", currentSongName);
            }

            final Map<String, Object> avoLogUserProperties = new HashMap<>();

            AvoLogger.logEventSent("Play", avoLogEventProperties, avoLogUserProperties);
        }

        if (!__AVO_NOOP__) {
            if (__INSPECTOR__ != null) {
                final Map<String, Object> inspectorEventProperties = new HashMap<>();
                if (currentSongName != null) {
                    inspectorEventProperties.put("Current Song Name", currentSongName);
                }

                try {
                    Method inspectorMethod = __INSPECTOR__.getClass().getDeclaredMethod("avoFunctionTrackSchemaFromEvent",
                        String.class, Map.class, String.class, String.class);
                    inspectorMethod.setAccessible(true);
                    inspectorMethod.invoke(__INSPECTOR__, "Play", inspectorEventProperties,
                        "6p9dLEHQVr", "05e0c366ec9e69b66bce9ef162b6dbe0df8122f56aa62cd68a705c7c30fc4ef4");
                } catch (Exception e) {
                    AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");;
                }
            }
            // destination custom
            final Map<String, Object> customEventProperties = new HashMap<>();
            if (currentSongName != null) {
                customEventProperties.put("Current Song Name", currentSongName);
            }

            final Map<String, Object> customUserProperties = new HashMap<>();

            custom.logEvent("Play", customEventProperties);
        }
    }

    /**
     * Pause: Sent when the user pauses a track.
     *
     * @param currentSongName The name of the song that's currently playing.
     *
     * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/Ei7HeAerpy">Pause</a>
     */
    public static void pause(final String currentSongName) {
        // assert properties
        if (__AVO_ENV__ != AvoEnv.PROD || __MOBILE_DEBUGGER_ENABLED__()) {
            final List<AvoAssertMessage> messages = new ArrayList<>();
            messages.addAll(assertCurrentSongName(currentSongName));
            // debug console in Avo
            if (!__AVO_NOOP__) {
                AvoInvoke.invoke("Ei7HeAerpy", "7b1a826ff48bd59d6b01e1df87e5afe51b766dad0954e71d49133525842644b7", messages);
            }
            if ((__AVO_ENV__ != AvoEnv.PROD && __MOBILE_DEBUGGER__ != null) || (__AVO_ENV__ == AvoEnv.PROD && __MOBILE_DEBUGGER_ENABLED__())) {
                // Avo mobile debugger
                __MOBILE_DEBUGGER_POST_EVENT__("Ei7HeAerpy", System.currentTimeMillis(), "Pause", new ArrayList<Map<String, String>>() {{
                    for (final AvoAssertMessage message: messages) {
                        add(new HashMap<String, String>() {{
                            put("tag", message.getAssertionType());
                            put("propertyId", message.getPropertyId());
                            put("message", message.getMessage());
                        }});
                    }
                }}, new ArrayList<Map<String, String>>() {{
                    add(new HashMap<String, String>() {{
                        put("id", "kwANmf381A");
                        put("name", "Current Song Name");
                        put("value", currentSongName != null ? currentSongName.toString() : "");
                    }});
                }}, new ArrayList<Map<String, String>>() {{
                }});
            }
            if (__AVO_ENV__ != AvoEnv.PROD && __STRICT__) {
                // throw exception if messages is not empty
                if (!messages.isEmpty()) {
                    throw new IllegalArgumentException("Error sending event 'Pause': " + messages.get(0).getMessage());
                }
            } else {
                for (AvoAssertMessage m: messages) {
                    Log.w(TAG, "[avo] " + m.getMessage());
                }
            }
        }

        if (__AVO_ENV__ != AvoEnv.PROD) {
            final Map<String, Object> avoLogEventProperties = new HashMap<>();
            if (currentSongName != null) {
                avoLogEventProperties.put("Current Song Name", currentSongName);
            }

            final Map<String, Object> avoLogUserProperties = new HashMap<>();

            AvoLogger.logEventSent("Pause", avoLogEventProperties, avoLogUserProperties);
        }

        if (!__AVO_NOOP__) {
            if (__INSPECTOR__ != null) {
                final Map<String, Object> inspectorEventProperties = new HashMap<>();
                if (currentSongName != null) {
                    inspectorEventProperties.put("Current Song Name", currentSongName);
                }

                try {
                    Method inspectorMethod = __INSPECTOR__.getClass().getDeclaredMethod("avoFunctionTrackSchemaFromEvent",
                        String.class, Map.class, String.class, String.class);
                    inspectorMethod.setAccessible(true);
                    inspectorMethod.invoke(__INSPECTOR__, "Pause", inspectorEventProperties,
                        "Ei7HeAerpy", "7b1a826ff48bd59d6b01e1df87e5afe51b766dad0954e71d49133525842644b7");
                } catch (Exception e) {
                    AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");;
                }
            }
            // destination custom
            final Map<String, Object> customEventProperties = new HashMap<>();
            if (currentSongName != null) {
                customEventProperties.put("Current Song Name", currentSongName);
            }

            final Map<String, Object> customUserProperties = new HashMap<>();

            custom.logEvent("Pause", customEventProperties);
        }
    }

    /**
     * Play Next Track: Sent when the user plays next track.
     *
     * @param currentSongName The name of the song that's currently playing.
     * @param upcomingTrackName The name of the upcoming track.
     *
     * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/rQvcOWggzs">Play Next Track</a>
     */
    public static void playNextTrack(final String currentSongName,
                                     final String upcomingTrackName) {
        // assert properties
        if (__AVO_ENV__ != AvoEnv.PROD || __MOBILE_DEBUGGER_ENABLED__()) {
            final List<AvoAssertMessage> messages = new ArrayList<>();
            messages.addAll(assertCurrentSongName(currentSongName));
            messages.addAll(assertUpcomingTrackName(upcomingTrackName));
            // debug console in Avo
            if (!__AVO_NOOP__) {
                AvoInvoke.invoke("rQvcOWggzs", "b560e43057828b34f5ee9127f85d1c7b6f73a6b22de640e2b6d75d571157272c", messages);
            }
            if ((__AVO_ENV__ != AvoEnv.PROD && __MOBILE_DEBUGGER__ != null) || (__AVO_ENV__ == AvoEnv.PROD && __MOBILE_DEBUGGER_ENABLED__())) {
                // Avo mobile debugger
                __MOBILE_DEBUGGER_POST_EVENT__("rQvcOWggzs", System.currentTimeMillis(), "Play Next Track", new ArrayList<Map<String, String>>() {{
                    for (final AvoAssertMessage message: messages) {
                        add(new HashMap<String, String>() {{
                            put("tag", message.getAssertionType());
                            put("propertyId", message.getPropertyId());
                            put("message", message.getMessage());
                        }});
                    }
                }}, new ArrayList<Map<String, String>>() {{
                    add(new HashMap<String, String>() {{
                        put("id", "kwANmf381A");
                        put("name", "Current Song Name");
                        put("value", currentSongName != null ? currentSongName.toString() : "");
                    }});
                    add(new HashMap<String, String>() {{
                        put("id", "Lvi0sAE1Am");
                        put("name", "Upcoming Track Name");
                        put("value", upcomingTrackName != null ? upcomingTrackName.toString() : "");
                    }});
                }}, new ArrayList<Map<String, String>>() {{
                }});
            }
            if (__AVO_ENV__ != AvoEnv.PROD && __STRICT__) {
                // throw exception if messages is not empty
                if (!messages.isEmpty()) {
                    throw new IllegalArgumentException("Error sending event 'Play Next Track': " + messages.get(0).getMessage());
                }
            } else {
                for (AvoAssertMessage m: messages) {
                    Log.w(TAG, "[avo] " + m.getMessage());
                }
            }
        }

        if (__AVO_ENV__ != AvoEnv.PROD) {
            final Map<String, Object> avoLogEventProperties = new HashMap<>();
            if (currentSongName != null) {
                avoLogEventProperties.put("Current Song Name", currentSongName);
            }
            if (upcomingTrackName != null) {
                avoLogEventProperties.put("Upcoming Track Name", upcomingTrackName);
            }

            final Map<String, Object> avoLogUserProperties = new HashMap<>();

            AvoLogger.logEventSent("Play Next Track", avoLogEventProperties, avoLogUserProperties);
        }

        if (!__AVO_NOOP__) {
            if (__INSPECTOR__ != null) {
                final Map<String, Object> inspectorEventProperties = new HashMap<>();
                if (currentSongName != null) {
                    inspectorEventProperties.put("Current Song Name", currentSongName);
                }
                if (upcomingTrackName != null) {
                    inspectorEventProperties.put("Upcoming Track Name", upcomingTrackName);
                }

                try {
                    Method inspectorMethod = __INSPECTOR__.getClass().getDeclaredMethod("avoFunctionTrackSchemaFromEvent",
                        String.class, Map.class, String.class, String.class);
                    inspectorMethod.setAccessible(true);
                    inspectorMethod.invoke(__INSPECTOR__, "Play Next Track", inspectorEventProperties,
                        "rQvcOWggzs", "b560e43057828b34f5ee9127f85d1c7b6f73a6b22de640e2b6d75d571157272c");
                } catch (Exception e) {
                    AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");;
                }
            }
            // destination custom
            final Map<String, Object> customEventProperties = new HashMap<>();
            if (currentSongName != null) {
                customEventProperties.put("Current Song Name", currentSongName);
            }
            if (upcomingTrackName != null) {
                customEventProperties.put("Upcoming Track Name", upcomingTrackName);
            }

            final Map<String, Object> customUserProperties = new HashMap<>();

            custom.logEvent("Play Next Track", customEventProperties);
        }
    }

    /**
     * Play Previous Track: Sent when the user plays previous track.
     *
     * @param currentSongName The name of the song that's currently playing.
     * @param upcomingTrackName The name of the upcoming track.
     *
     * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/xBjjLugyOM">Play Previous Track</a>
     */
    public static void playPreviousTrack(final String currentSongName,
                                         final String upcomingTrackName) {
        // assert properties
        if (__AVO_ENV__ != AvoEnv.PROD || __MOBILE_DEBUGGER_ENABLED__()) {
            final List<AvoAssertMessage> messages = new ArrayList<>();
            messages.addAll(assertCurrentSongName(currentSongName));
            messages.addAll(assertUpcomingTrackName(upcomingTrackName));
            // debug console in Avo
            if (!__AVO_NOOP__) {
                AvoInvoke.invoke("xBjjLugyOM", "0d88a383e59745393c9bbf4caf59ee869e8c826c79179a5bf77e55b3775ecddd", messages);
            }
            if ((__AVO_ENV__ != AvoEnv.PROD && __MOBILE_DEBUGGER__ != null) || (__AVO_ENV__ == AvoEnv.PROD && __MOBILE_DEBUGGER_ENABLED__())) {
                // Avo mobile debugger
                __MOBILE_DEBUGGER_POST_EVENT__("xBjjLugyOM", System.currentTimeMillis(), "Play Previous Track", new ArrayList<Map<String, String>>() {{
                    for (final AvoAssertMessage message: messages) {
                        add(new HashMap<String, String>() {{
                            put("tag", message.getAssertionType());
                            put("propertyId", message.getPropertyId());
                            put("message", message.getMessage());
                        }});
                    }
                }}, new ArrayList<Map<String, String>>() {{
                    add(new HashMap<String, String>() {{
                        put("id", "kwANmf381A");
                        put("name", "Current Song Name");
                        put("value", currentSongName != null ? currentSongName.toString() : "");
                    }});
                    add(new HashMap<String, String>() {{
                        put("id", "Lvi0sAE1Am");
                        put("name", "Upcoming Track Name");
                        put("value", upcomingTrackName != null ? upcomingTrackName.toString() : "");
                    }});
                }}, new ArrayList<Map<String, String>>() {{
                }});
            }
            if (__AVO_ENV__ != AvoEnv.PROD && __STRICT__) {
                // throw exception if messages is not empty
                if (!messages.isEmpty()) {
                    throw new IllegalArgumentException("Error sending event 'Play Previous Track': " + messages.get(0).getMessage());
                }
            } else {
                for (AvoAssertMessage m: messages) {
                    Log.w(TAG, "[avo] " + m.getMessage());
                }
            }
        }

        if (__AVO_ENV__ != AvoEnv.PROD) {
            final Map<String, Object> avoLogEventProperties = new HashMap<>();
            if (currentSongName != null) {
                avoLogEventProperties.put("Current Song Name", currentSongName);
            }
            if (upcomingTrackName != null) {
                avoLogEventProperties.put("Upcoming Track Name", upcomingTrackName);
            }

            final Map<String, Object> avoLogUserProperties = new HashMap<>();

            AvoLogger.logEventSent("Play Previous Track", avoLogEventProperties, avoLogUserProperties);
        }

        if (!__AVO_NOOP__) {
            if (__INSPECTOR__ != null) {
                final Map<String, Object> inspectorEventProperties = new HashMap<>();
                if (currentSongName != null) {
                    inspectorEventProperties.put("Current Song Name", currentSongName);
                }
                if (upcomingTrackName != null) {
                    inspectorEventProperties.put("Upcoming Track Name", upcomingTrackName);
                }

                try {
                    Method inspectorMethod = __INSPECTOR__.getClass().getDeclaredMethod("avoFunctionTrackSchemaFromEvent",
                        String.class, Map.class, String.class, String.class);
                    inspectorMethod.setAccessible(true);
                    inspectorMethod.invoke(__INSPECTOR__, "Play Previous Track", inspectorEventProperties,
                        "xBjjLugyOM", "0d88a383e59745393c9bbf4caf59ee869e8c826c79179a5bf77e55b3775ecddd");
                } catch (Exception e) {
                    AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");;
                }
            }
            // destination custom
            final Map<String, Object> customEventProperties = new HashMap<>();
            if (currentSongName != null) {
                customEventProperties.put("Current Song Name", currentSongName);
            }
            if (upcomingTrackName != null) {
                customEventProperties.put("Upcoming Track Name", upcomingTrackName);
            }

            final Map<String, Object> customUserProperties = new HashMap<>();

            custom.logEvent("Play Previous Track", customEventProperties);
        }
    }

    /**
     * Login: No description
     *
     * @param userId_ The value used to identify the user. Make sure it's a unique sequence of characters used to identify the user.
     * @param userEmail no description
     *
     * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/LXOJCcMv3f">Login</a>
     */
    public static void login(final String userId_, final String userEmail) {
        // assert properties
        if (__AVO_ENV__ != AvoEnv.PROD || __MOBILE_DEBUGGER_ENABLED__()) {
            final List<AvoAssertMessage> messages = new ArrayList<>();
            messages.addAll(assertUserId_(userId_));
            messages.addAll(assertUserEmail(userEmail));
            // debug console in Avo
            if (!__AVO_NOOP__) {
                AvoInvoke.invoke("LXOJCcMv3f", "050265d3bedc75266b64a89d750a11b31efe55382cbdd9043e242686d6284e3a", messages);
            }
            if ((__AVO_ENV__ != AvoEnv.PROD && __MOBILE_DEBUGGER__ != null) || (__AVO_ENV__ == AvoEnv.PROD && __MOBILE_DEBUGGER_ENABLED__())) {
                // Avo mobile debugger
                __MOBILE_DEBUGGER_POST_EVENT__("LXOJCcMv3f", System.currentTimeMillis(), "Login", new ArrayList<Map<String, String>>() {{
                    for (final AvoAssertMessage message: messages) {
                        add(new HashMap<String, String>() {{
                            put("tag", message.getAssertionType());
                            put("propertyId", message.getPropertyId());
                            put("message", message.getMessage());
                        }});
                    }
                }}, new ArrayList<Map<String, String>>() {{
                }}, new ArrayList<Map<String, String>>() {{
                    add(new HashMap<String, String>() {{
                        put("id", "avo-enriched-type-user-id");
                        put("name", "User Id");
                        put("value", userId_ != null ? userId_.toString() : "");
                    }});
                    add(new HashMap<String, String>() {{
                        put("id", "-rU9uRFvXe");
                        put("name", "User Email");
                        put("value", userEmail != null ? userEmail.toString() : "");
                    }});
                }});
            }
            if (__AVO_ENV__ != AvoEnv.PROD && __STRICT__) {
                // throw exception if messages is not empty
                if (!messages.isEmpty()) {
                    throw new IllegalArgumentException("Error sending event 'Login': " + messages.get(0).getMessage());
                }
            } else {
                for (AvoAssertMessage m: messages) {
                    Log.w(TAG, "[avo] " + m.getMessage());
                }
            }
        }

        if (__AVO_ENV__ != AvoEnv.PROD) {
            final Map<String, Object> avoLogEventProperties = new HashMap<>();

            final Map<String, Object> avoLogUserProperties = new HashMap<>();
            if (userEmail != null) {
                avoLogUserProperties.put("User Email", userEmail);
            }

            AvoLogger.logEventSent("Login", avoLogEventProperties, avoLogUserProperties);
        }

        if (!__AVO_NOOP__) {
            if (__INSPECTOR__ != null) {
                final Map<String, Object> inspectorEventProperties = new HashMap<>();

                try {
                    Method inspectorMethod = __INSPECTOR__.getClass().getDeclaredMethod("avoFunctionTrackSchemaFromEvent",
                        String.class, Map.class, String.class, String.class);
                    inspectorMethod.setAccessible(true);
                    inspectorMethod.invoke(__INSPECTOR__, "Login", inspectorEventProperties,
                        "LXOJCcMv3f", "050265d3bedc75266b64a89d750a11b31efe55382cbdd9043e242686d6284e3a");
                } catch (Exception e) {
                    AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");;
                }
            }
            // destination custom
            final Map<String, Object> customEventProperties = new HashMap<>();

            final Map<String, Object> customUserProperties = new HashMap<>();
            if (userEmail != null) {
                customUserProperties.put("User Email", userEmail);
            }

            custom.identify(userId_);
            custom.setUserProperties(userId_, customUserProperties);
            custom.logEvent("Login", customEventProperties);
        }
    }

    /**
     * Logout: No description
     *
     * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/rgk9vXIWk">Logout</a>
     */
    public static void logout() {
        // assert properties
        if (__AVO_ENV__ != AvoEnv.PROD || __MOBILE_DEBUGGER_ENABLED__()) {
            final List<AvoAssertMessage> messages = new ArrayList<>();
            // debug console in Avo
            if (!__AVO_NOOP__) {
                AvoInvoke.invoke("rgk9vXIWk", "b31e2c574afb99166bbbd111340c4c70459bd73a333b72d75d79987bf8079c9b", messages);
            }
            if ((__AVO_ENV__ != AvoEnv.PROD && __MOBILE_DEBUGGER__ != null) || (__AVO_ENV__ == AvoEnv.PROD && __MOBILE_DEBUGGER_ENABLED__())) {
                // Avo mobile debugger
                __MOBILE_DEBUGGER_POST_EVENT__("rgk9vXIWk", System.currentTimeMillis(), "Logout", new ArrayList<Map<String, String>>() {{
                    for (final AvoAssertMessage message: messages) {
                        add(new HashMap<String, String>() {{
                            put("tag", message.getAssertionType());
                            put("propertyId", message.getPropertyId());
                            put("message", message.getMessage());
                        }});
                    }
                }}, new ArrayList<Map<String, String>>() {{
                }}, new ArrayList<Map<String, String>>() {{
                }});
            }
        }

        if (__AVO_ENV__ != AvoEnv.PROD) {
            final Map<String, Object> avoLogEventProperties = new HashMap<>();

            final Map<String, Object> avoLogUserProperties = new HashMap<>();

            AvoLogger.logEventSent("Logout", avoLogEventProperties, avoLogUserProperties);
        }

        if (!__AVO_NOOP__) {
            if (__INSPECTOR__ != null) {
                final Map<String, Object> inspectorEventProperties = new HashMap<>();

                try {
                    Method inspectorMethod = __INSPECTOR__.getClass().getDeclaredMethod("avoFunctionTrackSchemaFromEvent",
                        String.class, Map.class, String.class, String.class);
                    inspectorMethod.setAccessible(true);
                    inspectorMethod.invoke(__INSPECTOR__, "Logout", inspectorEventProperties,
                        "rgk9vXIWk", "b31e2c574afb99166bbbd111340c4c70459bd73a333b72d75d79987bf8079c9b");
                } catch (Exception e) {
                    AvoLogger.logWarning("Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version.");;
                }
            }
            // destination custom
            final Map<String, Object> customEventProperties = new HashMap<>();

            final Map<String, Object> customUserProperties = new HashMap<>();

            custom.logEvent("Logout", customEventProperties);
            custom.unidentify();
        }
    }


}
// AVOMODULEMAP:"Avo"
// AVOEVENTMAP:["appOpened","play","pause","playNextTrack","playPreviousTrack","login","logout"]
